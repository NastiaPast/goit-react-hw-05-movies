{"version":3,"file":"static/js/387.849cba83.chunk.js","mappings":"gSAEaA,EAAYC,EAAAA,GAAAA,IAAH,2EAKTC,EAAYD,EAAAA,GAAAA,GAAH,sHAOTE,EAAWF,EAAAA,GAAAA,GAAH,yHAQRG,EAAeH,EAAAA,GAAAA,GAAH,2GAMZI,EAAWJ,EAAAA,GAAAA,IAAH,kEAKRK,EAAWL,EAAAA,GAAAA,GAAH,gDAIRM,EAASN,EAAAA,GAAAA,EAAH,mNAUNO,EAAUP,EAAAA,GAAAA,IAAH,qK,SC4BpB,EAzDa,WACX,OAAkCQ,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAcR,OAZAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,gHAESC,EAAAA,EAAAA,IAAeJ,GAFxB,gBAENK,EAFM,EAENA,KACRN,EAAaM,GAHC,gDAKdC,QAAQC,IAAR,MALc,yDAAH,qDAQfJ,GACD,GAAE,CAACH,KAGF,UAACZ,EAAD,YACE,SAACE,EAAD,UAAW,SACVQ,EAAUU,QACT,SAACjB,EAAD,UACGO,EAAUW,KAAI,gBAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,GAAIC,EAArB,EAAqBA,KAAMC,EAA3B,EAA2BA,UAA3B,OACb,UAACrB,EAAD,CAAcsB,UAAU,YAAxB,UACGJ,GACC,SAACd,EAAD,CACEmB,IAAG,UA5BJ,mCA4BI,OAAgBL,GACnBM,IAAG,UAAKJ,EAAL,eAGL,SAAChB,EAAD,CAASmB,IAAG,UA/BR,qDA+B4BC,IAAG,UAAKJ,EAAL,eAGrC,UAACnB,EAAD,YACE,SAACC,EAAD,UAAWkB,KACX,uBAAIC,SAZiCF,EAD5B,OAmBjB,SAAChB,EAAD,UAAQ,oDAIf,C,mMC5DKsB,EAAW,+BACXC,EAAU,mCAEHC,EAAgB,mCAAG,sGACPC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,uCACqBC,IAFd,uBACtBG,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,qDAOhBC,EAAgB,mCAAG,WAAMV,GAAN,yFACPQ,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iCACeC,EADf,iCAC+CN,EAD/C,gCADO,uBACtBS,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,sDAOhBjB,EAAc,mCAAG,WAAMO,GAAN,yFACLS,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAN,EADA,4BACsBO,EADtB,oBADK,uBACpBG,EADoB,EACpBA,KADoB,kBAIrBA,GAJqB,2CAAH,sDAOdE,EAAc,mCAAG,WAAMZ,GAAN,yFACLS,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAN,EADA,oBACcO,EADd,oBADK,uBACpBG,EADoB,EACpBA,KADoB,kBAIrBA,GAJqB,2CAAH,sDAOdG,EAAiB,mCAAG,WAAMb,GAAN,yFACRS,EAAAA,EAAAA,IAAA,UAClBH,EADkB,kBACAN,EADA,6BACuBO,EADvB,2BADQ,uBACvBG,EADuB,EACvBA,KADuB,kBAIxBA,GAJwB,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/fetchMovies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin-top: 30px;\n  padding: 0 80px 40px 80px;\n`;\n\nexport const CastTitle = styled.h3`\n  font-size: 30px;\n  font-weight: 500;\n  text-align: center;\n  text-transform: uppercase;\n`;\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 50px;\n  align-items: center;\n  margin-top: 30px;\n`;\n\nexport const CastListItem = styled.li`\n  width: calc((100% - 4 * 50px) / 5);\n  height: 400px;\n  word-wrap: break-word;\n`;\n\nexport const CastInfo = styled.div`\n  margin-top: 24px;\n  max-width: 200px;\n`;\n\nexport const CastName = styled.h3`\n  margin-bottom: 12px;\n`;\n\nexport const NoInfo = styled.p`\n  margin: 30px auto 0 auto;\n  padding: 20px;\n  max-width: 500px;\n  border-radius: 5px;\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n  background-color: #f8f8f8;\n  text-align: center;\n`;\n\nexport const CastImg = styled.img`\n  border-radius: 3px;\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\n    0px 2px 1px rgba(0, 0, 0, 0.2);\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { fetchMovieCast } from '../../services/fetchMovies';\nimport {\n  CastTitle,\n  CastInfo,\n  CastList,\n  CastListItem,\n  CastName,\n  NoInfo,\n  Container,\n  CastImg,\n} from './Cast.styled';\n\nconst BASE_URL = 'https://image.tmdb.org/t/p/w200';\nconst DEFAULT_IMG = 'https://via.placeholder.com/200x300?text=No+Image';\n\nconst Cast = () => {\n  const [movieCast, setMovieCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const { cast } = await fetchMovieCast(movieId);\n        setMovieCast(cast);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <Container>\n      <CastTitle>Cast</CastTitle>\n      {movieCast.length ? (\n        <CastList>\n          {movieCast.map(({ profile_path, id, name, character }) => (\n            <CastListItem className=\"cast-card\" key={id}>\n              {profile_path ? (\n                <CastImg\n                  src={`${BASE_URL}${profile_path}`}\n                  alt={`${name} profile`}\n                />\n              ) : (\n                <CastImg src={`${DEFAULT_IMG}`} alt={`${name} profile`} />\n              )}\n\n              <CastInfo>\n                <CastName>{name}</CastName>\n                <p>{character}</p>\n              </CastInfo>\n            </CastListItem>\n          ))}\n        </CastList>\n      ) : (\n        <NoInfo>We don't have any information about the cast.</NoInfo>\n      )}\n    </Container>\n  );\n};\n\nCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      profile_path: PropTypes.string,\n      name: PropTypes.string,\n      character: PropTypes.string,\n    })\n  ),\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '0bd052a36cb17fd9656e5b38bc680abf';\n\nexport const fetchTrendMovies = async () => {\n  const { data } = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nexport const fetchMovieByName = async name => {\n  const { data } = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${name}&page=1&include_adult=false`\n  );\n  return data;\n};\n\nexport const fetchMovieCast = async id => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const fetchMovieById = async id => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const fetchMovieReviews = async id => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${id}}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return data;\n};\n"],"names":["Container","styled","CastTitle","CastList","CastListItem","CastInfo","CastName","NoInfo","CastImg","useState","movieCast","setMovieCast","movieId","useParams","useEffect","fetchCast","fetchMovieCast","cast","console","log","length","map","profile_path","id","name","character","className","src","alt","BASE_URL","API_KEY","fetchTrendMovies","axios","data","fetchMovieByName","fetchMovieById","fetchMovieReviews"],"sourceRoot":""}